import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;
  String get appNameLabel => "Outfitter";
  String get applyFiltersButtonTitle => "Zastosuj";
  String get authPageTitle => "Logowanie";
  String get brandInputHint => "Producent";
  String get categoryButtonTitle => "Kategoria";
  String get categoryLabel => "Kategoria";
  String get categoryPickerPageTitle => "Wybierz kategorię";
  String get categoryRequiredErrorMessage => "Wybierz kategorię";
  String get createItemPageTitle => "Tworzenie";
  String get descriptionInputHint => "Opis";
  String get discoverTabTitle => "Odkrywanie";
  String get editItemPageTitle => "Edycja";
  String get fieldRequiredErrorMessage => "Pole wymagane";
  String get filtersLabel => "Filtry";
  String get forSaleLabel => "Na sprzedaż";
  String get forSaleOnlyLabel => "Tylko na sprzedaż";
  String get generalErrorMessage => "Coś poszło nie tak";
  String get googleSignInButtonTitle => "Zaloguj z Google";
  String get informationLabel => "Informacje";
  String get loadingLabel => "Trwa ładowanie danych";
  String get loginRequiredToBrowseWardrobeLabel => "Musisz się zalogować, by móc przeglądać i dodawać swoją garderobę.";
  String get mainColorLabel => "Kolor główny";
  String get myItemsTanTitle => "Moja szafa";
  String get nameInputHint => "Nazwa";
  String get notSelectedLabel => "Nie wybrano";
  String get photosLabel => "Zdjęcia";
  String get privateCollectionLabel => "Kolekcja prywatna";
  String get saveAction => "Zapisz";
  String get sizeInputHint => "Rozmiar";
  String get visibilityAndTradeLabel => "Widoczność i handel";
  String accessoryCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Dodatek";
      case "many":
        return "Dodatki";
      default:
        return "$count dodatki";
    }
  }
  String bagCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Torba";
      case "many":
        return "Torby";
      default:
        return "$count torby";
    }
  }
  String beachwearCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Strój plażowy";
      case "many":
        return "Plażowe";
      default:
        return "$count stroje plażowe";
    }
  }
  String blouseCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Bluza";
      case "many":
        return "Bluzy";
      default:
        return "$count bluzy";
    }
  }
  String coatCategory(dynamic count) {
    switch (count.toString()) {
      case "many":
        return "Płaszcz";
      default:
        return "$count płaszcze";
    }
  }
  String dressCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Sukienka";
      case "many":
        return "Sukienki";
      default:
        return "$count sukienki";
    }
  }
  String jacketCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Kurtka";
      case "many":
        return "Kurtki";
      default:
        return "$count kurtki";
    }
  }
  String lightJacketCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Marynarka";
      case "many":
        return "Marynarki";
      default:
        return "$count marynarki";
    }
  }
  String shirtCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Koszula";
      case "many":
        return "Koszule";
      default:
        return "$count koszule";
    }
  }
  String shoesCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Buty";
      case "many":
        return "Buty";
      default:
        return "$count buty";
    }
  }
  String skirtCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Spódnica";
      case "many":
        return "Spódnice";
      default:
        return "$count spódnice";
    }
  }
  String sweaterCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Sweter";
      case "many":
        return "Swetry";
      default:
        return "$count swetry";
    }
  }
  String trousersCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Spodnie";
      case "many":
        return "Spodnie";
      default:
        return "$count spodnie";
    }
  }
  String tshirtCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return "Podkoszulek";
      case "many":
        return "Podkoszulki";
      default:
        return "$count podkoszulki";
    }
  }
  String underwearCategory(dynamic count) {
    switch (count.toString()) {
      case "1":
        return " Bielizna";
      case "many":
        return "Bielizna";
      default:
        return "$count bielizna";
    }
  }
}

class en extends S {
  const en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported);
    };
  }

  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported) {
    if (locale == null || !isSupported(locale)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const en());
        default:
        // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) =>
      locale != null && supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
        ? l.languageCode
        : l.toString();
